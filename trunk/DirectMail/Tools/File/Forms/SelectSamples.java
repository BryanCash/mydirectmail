/*
 * SelectBreakFields.java
 *
 * Created on 28 Ιούλιος 2007, 8:57 μμ
 */
package DirectMail.Tools.File.Forms;

import DirectMail.Main.MainForm;
import DirectMail.*;
import DirectMail.Help.Components.MyDraggable;
import DirectMail.Help.Functions.DmFunctions;
import DirectMail.Options.DmOptions;
import java.io.IOException;
import java.io.PrintWriter;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.logging.Level;
import java.awt.Color;
import java.awt.Cursor;
import java.awt.Font;
import java.sql.ResultSet;
import java.util.logging.Logger;
import javax.swing.JLabel;
import soldatos.connection.MyDBCConnection;
import soldatos.connection.MyDBCFunctions;
import soldatos.functions.ArrayFunctions;
import soldatos.functions.FileFunctions;
import soldatos.functions.StringFunctions;

/**
 * Select fields for deleting
 * @author ssoldatos
 */
public class SelectSamples extends MyDraggable {

  private MainForm m;
  private boolean[] uniqueFields;
  private PrintWriter output;
  private int limit;

  /**
   * Constructor:
   * Inits the panel and adds a label for every field.
   * Clicking on a fields marks/umarks it for deleting.
   * @param m 
   */
  public SelectSamples(MainForm m) {
    this.m = m;
    uniqueFields = new boolean[m.getFields()];
    initComponents();
    addDeleteFields();
    setLocationRelativeTo(m);
    setVisible(true);

  }

  /** This method is called from within the constructor to
   * initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is
   * always regenerated by the Form Editor.
   */
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {

    jPanel1 = new javax.swing.JPanel();
    labelTitle = new javax.swing.JLabel();
    okButton = new javax.swing.JButton();
    cancelButton = new javax.swing.JButton();
    jLabel1 = new javax.swing.JLabel();
    textfield_numberOfSamples = new javax.swing.JTextField();
    jLabel2 = new javax.swing.JLabel();
    scrollPane = new javax.swing.JScrollPane();
    fieldsPanel = new javax.swing.JPanel();

    setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
    setTitle("Select fields to delete");
    setResizable(false);

    jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2));

    labelTitle.setFont(labelTitle.getFont().deriveFont(labelTitle.getFont().getStyle() | java.awt.Font.BOLD, labelTitle.getFont().getSize()+2));
    labelTitle.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
    labelTitle.setText("Select unique fields");

    okButton.setText("OK");
    okButton.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        okButtonActionPerformed(evt);
      }
    });

    cancelButton.setText("Cancel");
    cancelButton.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        cancelButtonActionPerformed(evt);
      }
    });

    jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
    jLabel1.setText("Maximum number of samples:");

    jLabel2.setForeground(new java.awt.Color(255, 0, 51));
    jLabel2.setText("Blank for no limit");

    fieldsPanel.setLayout(new javax.swing.BoxLayout(fieldsPanel, javax.swing.BoxLayout.Y_AXIS));
    scrollPane.setViewportView(fieldsPanel);

    javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
    jPanel1.setLayout(jPanel1Layout);
    jPanel1Layout.setHorizontalGroup(
      jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(jPanel1Layout.createSequentialGroup()
        .addContainerGap()
        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
          .addComponent(labelTitle, javax.swing.GroupLayout.DEFAULT_SIZE, 417, Short.MAX_VALUE)
          .addGroup(jPanel1Layout.createSequentialGroup()
            .addComponent(okButton)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
            .addComponent(cancelButton))
          .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 213, Short.MAX_VALUE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
            .addComponent(textfield_numberOfSamples, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGap(36, 36, 36))
          .addComponent(scrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 417, Short.MAX_VALUE))
        .addContainerGap())
    );

    jPanel1Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {cancelButton, okButton});

    jPanel1Layout.setVerticalGroup(
      jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(jPanel1Layout.createSequentialGroup()
        .addContainerGap()
        .addComponent(labelTitle)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(scrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 257, Short.MAX_VALUE)
        .addGap(2, 2, 2)
        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(jLabel1)
          .addComponent(textfield_numberOfSamples, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
          .addComponent(jLabel2))
        .addGap(46, 46, 46)
        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(cancelButton)
          .addComponent(okButton))
        .addContainerGap())
    );

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
    getContentPane().setLayout(layout);
    layout.setHorizontalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
    );
    layout.setVerticalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
    );

    pack();
    java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
    java.awt.Dimension dialogSize = getSize();
    setLocation((screenSize.width-dialogSize.width)/2,(screenSize.height-dialogSize.height)/2);
  }// </editor-fold>//GEN-END:initComponents

  /**
   * Cancels the breaking
   * @param evt Clicking th ecancel button event
   */
  private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
    dispose();
  }//GEN-LAST:event_cancelButtonActionPerformed

  /**
   * Commits the breaking
   * @param evt Clicking the OK button event
   */
  private void okButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_okButtonActionPerformed
    try {
      dispose();
      try {
        limit = Integer.parseInt(textfield_numberOfSamples.getText());
      } catch (NumberFormatException ex) {
        limit = 0;
      }
      CreateTheSamples cr = new CreateTheSamples(m, uniqueFields);
      Thread t = new Thread(cr);
      t.start();
    } catch (SQLException ex) {
      MainForm.myLog.log(Level.SEVERE, null, ex);
    }
  }//GEN-LAST:event_okButtonActionPerformed

  /**
   * Adds the labels for all the fields on the panel
   */
  private void addDeleteFields() {
    String flArr[] = new String[m.getFields()];
    flArr = m.getFirstLine().split("" + m.getDelimeter(), -1);
    final Font selected = new Font("Monospaced", Font.BOLD, 14);
    final Font notSelected = new Font("Monospaced", Font.PLAIN, 14);

    for (int i = 0; i < m.getFields(); i++) {
      uniqueFields[i] = false;
      JLabel l = new JLabel();
      l.setText(StringFunctions.padRight(m.getHeaderTitles().get(i), 12, " ") + ": " + StringFunctions.cutString(flArr[i], 20));
      l.setName("" + i);
      l.setFont(notSelected);

      // mouse over
      l.addMouseListener(new java.awt.event.MouseAdapter() {

        @Override
        public void mouseEntered(java.awt.event.MouseEvent evt) {
          labelMouseOver(evt);
        }
      });
      //mouseout
      l.addMouseListener(new java.awt.event.MouseAdapter() {

        @Override
        public void mouseExited(java.awt.event.MouseEvent evt) {
          labelMouseOut(evt);
        }
      });

      // Click
      l.addMouseListener(new java.awt.event.MouseAdapter() {

        @Override
        public void mouseClicked(java.awt.event.MouseEvent evt) {
          if (evt.getComponent().getFont() == selected) {
            evt.getComponent().setFont(notSelected);
          } else {
            evt.getComponent().setFont(selected);
          }
          int id = Integer.parseInt(evt.getComponent().getName());
          uniqueFields[id] = !uniqueFields[id];
        }
      });
      fieldsPanel.add(l);
    }

  }

  /**
   * Sets the cursor to hand
   * Changes the label's color to red
   * @param evt The mouse over event
   */
  private static void labelMouseOver(java.awt.event.MouseEvent evt) {
    // Font big = new Font("Monospace",Font.BOLD,14);
    evt.getComponent().setCursor(new Cursor(Cursor.HAND_CURSOR));
    //evt.getComponent().setFont(big);
    evt.getComponent().setForeground(Color.RED);
  }

  /**
   * Changes the label's color to black
   * @param evt The mouse out event
   */
  private static void labelMouseOut(java.awt.event.MouseEvent evt) {
    //Font small = new Font("Monospace",Font.BOLD,12);
    //evt.getComponent().setCursor(new Cursor(Cursor.HAND_CURSOR));
    //evt.getComponent().setFont(small);
    evt.getComponent().setForeground(Color.BLACK);
  }
  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JButton cancelButton;
  private javax.swing.JPanel fieldsPanel;
  private javax.swing.JLabel jLabel1;
  private javax.swing.JLabel jLabel2;
  private javax.swing.JPanel jPanel1;
  private javax.swing.JLabel labelTitle;
  private javax.swing.JButton okButton;
  private javax.swing.JScrollPane scrollPane;
  private javax.swing.JTextField textfield_numberOfSamples;
  // End of variables declaration//GEN-END:variables

  class CreateTheSamples implements Runnable {

    private final MainForm m;
    private final boolean[] uniqueFields;
    private long start;
    private long end;
    private String table;
    private Statement stmt;
    private String filename;

    CreateTheSamples(MainForm m, boolean[] uniqueFields) throws SQLException {
      this.m = m;
      this.uniqueFields = uniqueFields;
    }

    @Override
    public void run() {
      try {
        MainForm.glassPane.activate(null);
        start = System.currentTimeMillis();
        m.appendOutput("\nStarting creation of samples");
        m.progressBar.setIndeterminate(true);
        filename = m.getOpenedFile().replaceAll("\\.", "_samples.");
        String outFile = m.getCurrentDirectory() + "/" + filename;
        output = FileFunctions.createOutputStream(outFile, false);
        createTheTable();
        getTheSamples();
        end = System.currentTimeMillis();
        m.appendOutput("\nExecution time : " + DmFunctions.execTime(start, end));
        m.progressBar.setIndeterminate(false);
        MainForm.glassPane.deactivate();

      } catch (IOException ex) {
        Logger.getLogger(SelectSamples.class.getName()).log(Level.SEVERE, null, ex);
      } catch (SQLException ex) {
        MainForm.myLog.log(Level.SEVERE, null, ex);
      } finally {
        output.close();
      }
    }

    private void createTheTable() throws SQLException {
      MyDBCConnection.createMySQLConnection();
      MyDBCConnection.connect(
          MainForm.options.toString(DmOptions.HOST),
          DmOptions.TMP_DB,
          MainForm.options.toString(DmOptions.DB_USER),
          MainForm.options.toString(DmOptions.DB_PASSWORD));
      stmt = MyDBCConnection.myConnection.createStatement();
      String[] cols = new String[m.getFields()];
      for (int i = 0; i < m.getFields(); i++) {
        cols[i] = "Field_" + i;
      }
      table = MainForm.options.toString(DmOptions.DB_PREFIX) + "_samples";
      MainForm.myLog.log(Level.INFO, "Creating the table");
      m.appendOutput("\nCreating the table");
      MyDBCFunctions.createTable(
          stmt, DmOptions.TMP_DB, table, cols, "InnoDB", m.getCharacterSet(), true);
      MainForm.myLog.log(Level.INFO, "Filling the table");
       m.appendOutput("\nFilling the table");
      MyDBCFunctions.loadDataInFile(stmt, DmOptions._JAR_DIR_+"tmp/" + m.getOrigFileName(),
          table, String.valueOf(m.getDelimeter()), "", soldatos.constants.System.LINE_FEED);
      MainForm.myLog.log(Level.FINE, "Table filled");
       m.appendOutput("\nTable filled");
    }

    private void getTheSamples() throws SQLException {
      String group = "";
      int uniqueCount = 0;
      int samplesCount = 0;
      String limitStr = "";
      for (int i = 0; i < uniqueFields.length; i++) {
        if (uniqueFields[i]) {
          uniqueCount++;
          group += "Field_" + i + ", ";
        }
      }
      group = group.substring(0, group.length()-2);
      if(limit > 0){
        limitStr = " LIMIT " + limit;
      }
      String sql = "SELECT * FROM " + DmOptions.TMP_DB + "." + table +
          " GROUP BY " + group + " " + limitStr;
      MainForm.myLog.log(Level.INFO, "Getting the samples for " + uniqueCount + " unique fields");
      m.appendOutput("\nGetting the samples for " + uniqueCount + " unique fields");
      ResultSet rs = stmt.executeQuery(sql);
      String[] fields = new String[m.getFields()];

      while (rs.next()) {
        samplesCount++;
        for (int i = 0; i < m.getFields(); i++) {
          fields[i] = rs.getString(i + 1);
        }
        output.print(ArrayFunctions.join(fields, m.getDelimeter()) + "\r\n");
      }
       m.appendOutput("\nFile:" + filename + " with " + samplesCount + " samples were created");
      MainForm.myLog.log(Level.FINE, "File:" + filename + " with " + samplesCount + " samples were created");
    }
  }
}
