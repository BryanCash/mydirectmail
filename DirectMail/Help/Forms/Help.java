/*
 * Help.java
 *
 * Created on 1 Αύγουστος 2007, 12:56 μμ
 */
package DirectMail.Help.Forms;

import DirectMail.Main.MainForm;
import javax.swing.JMenu;
import javax.swing.JMenuItem;
import javax.swing.JTree;
import javax.swing.MenuElement;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;
import javax.swing.tree.TreePath;

/**
 *
 * @author  ssoldatos
 */
public class Help extends javax.swing.JFrame {

  private String[] helpList;
  private DefaultMutableTreeNode root;
  private String html = "";
  private MainForm m;
  private JMenuItem currentHelpMenuItem;

  /** Creates new form Help
   * @param m
   */
  public Help(MainForm m) {
    this.m = m;
    //populateTree();
    initComponents();
    popTree();

    helpTree.setModel(new DefaultTreeModel(root));
    setVisible(true);
  }

  private void popTree() {
    root = new DefaultMutableTreeNode("Help");
    int menuBarItems = m.mainMenuBar.getMenuCount();
    for (int i = 0; i < menuBarItems; i++) {
      JMenu cMenuBarItem = m.mainMenuBar.getMenu(i);
      String cMenuBarItemName = cMenuBarItem.getText();
      DefaultMutableTreeNode cMenuBarNode = new DefaultMutableTreeNode(cMenuBarItemName);
      int menus = m.mainMenuBar.getMenu(i).getItemCount();
      for (int j = 0; j < menus; j++) {
        JMenuItem menu = m.mainMenuBar.getMenu(i).getItem(j);
        root.add(cMenuBarNode);
        getMenus(cMenuBarNode, menu);
      }
    }


  }

  private void getMenus(DefaultMutableTreeNode anc, JMenuItem menu) {
    MenuElement submenu;
    JMenuItem subMenuItem;
    DefaultMutableTreeNode cMenuNode;
    


    if (menu != null) {
      String cMenuName = menu.getText();
      cMenuNode = new DefaultMutableTreeNode(cMenuName);
      DefaultMutableTreeNode cSubMenuNode;
      anc.add(cMenuNode);
      if (menu.getSubElements().length == 0) {
        cMenuNode = new DefaultMutableTreeNode(cMenuName);
      } else {
        MenuElement[] sub = menu.getSubElements();
        anc.add(cMenuNode);
        for (int i = 0; i < sub.length; i++) {
          submenu = sub[i];

          for (int j = 0; j < submenu.getSubElements().length; j++) {
            subMenuItem = (JMenuItem) submenu.getSubElements()[j];
            cSubMenuNode = new DefaultMutableTreeNode(subMenuItem.getText());
            getMenus(cMenuNode, subMenuItem);
          }
        }
      }

    } else {
    }

  }

  /** This method is called from within the constructor to
   * initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is
   * always regenerated by the Form Editor.
   */
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {

    jLabel1 = new javax.swing.JLabel();
    closeButton = new javax.swing.JButton();
    jSplitPane1 = new javax.swing.JSplitPane();
    helpArea = new javax.swing.JScrollPane();
    helpHTML = new javax.swing.JEditorPane();
    jScrollPane1 = new javax.swing.JScrollPane();
    helpTree = new JTree(root);

    setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
    setTitle("Direct Mail Application - Help");
    setIconImage(new javax.swing.ImageIcon("D:\\JavaProjects\\DirectMail\\src\\DirectMail\\Images\\help.gif").getImage());

    jLabel1.setFont(new java.awt.Font("Tahoma", 1, 14));
    jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
    jLabel1.setText("Direct Mail Application Help");

    closeButton.setText("Close");
    closeButton.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        closeButtonActionPerformed(evt);
      }
    });

    jSplitPane1.setDividerLocation(240);
    jSplitPane1.setOneTouchExpandable(true);

    helpArea.setAutoscrolls(true);
    helpArea.setPreferredSize(new java.awt.Dimension(108, 600));

    helpHTML.setContentType("text/html");
    helpHTML.setEditable(false);
    helpArea.setViewportView(helpHTML);

    jSplitPane1.setRightComponent(helpArea);

    jScrollPane1.setAutoscrolls(true);
    jScrollPane1.setMinimumSize(new java.awt.Dimension(240, 400));
    jScrollPane1.setPreferredSize(new java.awt.Dimension(240, 322));

    helpTree.setShowsRootHandles(true);
    helpTree.addTreeSelectionListener(new javax.swing.event.TreeSelectionListener() {
      public void valueChanged(javax.swing.event.TreeSelectionEvent evt) {
        helpTreeValueChanged(evt);
      }
    });
    jScrollPane1.setViewportView(helpTree);

    jSplitPane1.setLeftComponent(jScrollPane1);

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
    getContentPane().setLayout(layout);
    layout.setHorizontalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(layout.createSequentialGroup()
        .addContainerGap()
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
          .addComponent(jSplitPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 621, Short.MAX_VALUE)
          .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 621, Short.MAX_VALUE)
          .addComponent(closeButton))
        .addContainerGap())
    );
    layout.setVerticalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(layout.createSequentialGroup()
        .addContainerGap()
        .addComponent(jLabel1)
        .addGap(19, 19, 19)
        .addComponent(jSplitPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 501, Short.MAX_VALUE)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(closeButton)
        .addContainerGap())
    );

    java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
    setBounds((screenSize.width-661)/2, (screenSize.height-629)/2, 661, 629);
  }// </editor-fold>//GEN-END:initComponents

  private void helpTreeValueChanged(javax.swing.event.TreeSelectionEvent evt) {//GEN-FIRST:event_helpTreeValueChanged
    DefaultMutableTreeNode node = (DefaultMutableTreeNode) helpTree.getLastSelectedPathComponent();
    if (node == null) //Nothing is selected.
    {
      return;
    }
    Object nodeInfo = node.getUserObject();
    MenuElement[] el;
    if (node.isLeaf()) {
     helpTree.scrollPathToVisible(new TreePath(node.getPath()));
      el = m.mainMenuBar.getSubElements();
      getMenuItemByText((String) node.getUserObject());
      displayHelp(nodeInfo, currentHelpMenuItem);
    } else {
      return;
    }

  }//GEN-LAST:event_helpTreeValueChanged

  private void getMenuItemByText(String name) {
    JMenuItem menuItem = null;
    int menuBarItems = m.mainMenuBar.getMenuCount();
    JMenu menu;
    for (int i = 0; i < menuBarItems; i++) {
      JMenu cMenuBarItem = m.mainMenuBar.getMenu(i);
      String cMenuBarItemName = cMenuBarItem.getText();
      menu = m.mainMenuBar.getMenu(i);
      getMenuItem(menu, name, false);
    }

    
  }

  private void getMenuItem(JMenuItem menu, String name, boolean exit) {
    MenuElement submenu;
    JMenuItem subMenuItem;
    if (menu.getText().equals(name)) {
      exit = true;
      currentHelpMenuItem = menu;     
    }


    if (menu.getSubElements().length == 0) {
      if (menu.getText().equals(name)) {
      }
    } else {
      MenuElement[] sub = menu.getSubElements();
      for (int i = 0; i < sub.length; i++) {
        submenu = sub[i];

        for (int j = 0; j < submenu.getSubElements().length; j++) {
          subMenuItem = (JMenuItem) submenu.getSubElements()[j];
          if (subMenuItem.getText().equals(name)) {
            currentHelpMenuItem = subMenuItem;
          } else {
            if (!exit) {
            getMenuItem(subMenuItem, name, exit);
            }
          }

        }
      }
    }

    
  }

  private void closeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeButtonActionPerformed
    dispose();
  }//GEN-LAST:event_closeButtonActionPerformed
  
 
  
  private void displayHelp(Object node,JMenuItem menuItem) {
    
    html = "<html><body>";
    html += "<p align=\"center\"><b>" + node + "</b></p><p style=\"font-size:11px\" align=\"justify\">";
    // FILE
    html += menuItem.getToolTipText();
     html += "</p></body></html>";
    helpHTML.setText(html);
    
//    if (node.equals("Open")){
//      html += menuItem.getToolTipText();
//    } else if (node.equals("Undo")){
//      html += undoHelp();
//    } else if (node.equals("Append")){
//      html += appendHelp();
//    } else if (node.equals("Save")){
//      html += saveHelp();
//    } else if (node.equals("Revert")){
//      html += revertHelp();
//    } else if (node.equals("Create Template")){
//      html += createTemplatetHelp();
//    } else if (node.equals("Apply Template")){
//      html += applyTemplatetHelp();
//    } else if (node.equals("Save Template")){
//      html += saveTemplateHelp();
//    } else if (node.equals("Quit")){
//      html += quitHelp();
//      
//      //PRE ENVELOPING
//    } else if (node.equals("Sort by TK")){
//      html += sortByTkHelp();
//    } else if (node.equals("Make Fixed File")){
//      html += makeFixedFileHelp();
//    } else if (node.equals("Break Long Fields")){
//      html += BreakLongFieldsHelp();
//    } else if (node.equals("Create Zip Flag")){
//      html += CreateZipFlagHelp();
//    } else if (node.equals("Add Counter")){
//      html += addCounterHelp();
//    } else if (node.equals("Change Delimeter")){
//      html += changeDelimeterHelp();
//    }
//    
//    // POST ENVELOPING
//    else if (node.equals("Not Enveloped")){
//      html += notEnvelopedHelp();
//    } else if (node.equals("Not Enveloped IDs")){
//      html += notEnvelopedIdsHelp();
//    } else if (node.equals("Reprint")){
//      html += reprintHelp();
//    }
//    
//    // ZIP CODES
//    else if (node.equals("Format TK")){
//      html += formatTkIdsHelp();
//    } else if (node.equals("Combine TK & City")){
//      html += CombineTkCitytHelp();
//    } else if (node.equals("TK Report")){
//      html += tkReportHelp();
//    } else if (node.equals("Find TK")){
//      html += findTkHelp();
//    } else if (node.equals("TK Labels")){
//      html += tkLabelsHelp();
//    } else if (node.equals("TK Labels From PCADD")){
//      html += tkLabelsFromPcaddHelp();
//    }
//    
//    
//    html += "</p></body></html>";
//    helpHTML.setText(html);
  }
  
  // FILE MENU
  private String openHelp() {
    String out = "";
    out = "Opens a file for processing.";
    return out;
  }
  
  private String undoHelp() {
    String out = "";
    out = "Undo the last action.<br>Number of undos are unlimited.";
    return out;
  }
  
  private String appendHelp() {
    String out = "";
    out = "Appends a new file to the current.<br><i>Not implemented yet!</i>";
    return out;
  }
  
  private String saveHelp() {
    String out = "";
    out = "Saves the current processed file.<br>Default location is the dir of the original file.";
    return out;
  }
  
  private String revertHelp() {
    String out = "";
    out = "Reverts to the original opened file.";
    return out;
  }
  
   private String createTemplatetHelp() {
    String out = "";
    out = "";
    return out;
  }
   
    private String applyTemplatetHelp() {
    String out = "";
    out = ".";
    return out;
  }
    
     private String saveTemplateHelp() {
    String out = "";
    out = ".";
    return out;
  }
  
  private String quitHelp() {
    String out = "";
    out = "Exits the program.";
    return out;
  }
  
  
  // PRE ENVELOPING
  
  private String sortByTkHelp() {
    String out = "";
    out =  "Inserts each record in a database and sorts them by quantity of the Zip Codes.<br>" +
      "Also formats the ZipCode to '@XXXXX' and appends the quantity at the end of each record.";
    return out;
  }
  
  private String makeFixedFileHelp() {
    String out = "";
    out = "Reads each record and counts the characters of each field.<br>" +
      "Then pads each field to the maximum length, creating a fixed length file";
    return out;
  }
  
  private String BreakLongFieldsHelp() {
    String out = "";
    out = "Breaks long fields to two smaller ones.<br>Maximum length of each field is defined in the General Options tab" +
      " (<b>Tools-Options-General-Maximum length of broken fields</b>)<br><br>" +
      "The two new fields are created by splitting the old line in a 'space' character.<br>" +
      "If no space is found in the old field, the first new field is blank and the second is trimed to the maximum length.<br>" +
      "Also if the two new fields are longer than the maximum length are also trimed.";
    return out;
  }
  
  private String CreateZipFlagHelp() {
    String out = "";
    out = "Creates the ZipCode flag for the PCADD Application.<br>" +
      "It incrments the flag only if the quantity of the envelopes are greater than the number defined in the options" +
      " (<b>Tools-Options-General-Maximum number of unsorted envelopes</b>)";
    return out;
  }
  
  private String addCounterHelp() {
    String out = "";
    out = "Adds a counter to each record.<br>" +
      "If the counter will be followed by a \"1\" is defined in (<b>Tools-Options-General-Add \"1\" to counter.</b>)";
    return out;
  }
  
  private String changeDelimeterHelp() {
    String out = "";
    out = "Cycles the file delimeter through 'TAB', '#' and ';'";
    return out;
  }
  
  private String notEnvelopedHelp() {
    String out = "";
    out = "Reads the PCADD report file nad generates a file with the records that have not been enveloped";
    return out;
  }
  
  // POST ENVELOPING MENU
  private String notEnvelopedIdsHelp() {
    String out = "";
    out = "Reads the PCADD report file nad generates a file with the ID's of the records that have not been enveloped";
    return out;
  }
  
  private String reprintHelp() {
    String out = "";
    out = "Creates a reprint file for the printers or the enveloping machine.<br><br>" +
      "The ids to be reprinted are inserted in the form of :<br><br>" +
      "<b>For the enveloping machine reprint:</b><br>" +
      "xxxxxx,yyyyyy<br>where:<br>xxxxxx is the ID of the record and <br>yyyyyy are the number of pages<br>" +
      "The file that is created repeats each record depending of the number of envelopes that are needed.<br>" +
      "The number of pages in each envelope is defined in <b>Tools-Options-General Tab-Maximum pages in an envelope</b><br><br>" +
      "<b>For the printers:</b><br>" +
      "xxxxxx<br>where:<br>xxxxxx is the ID of the record <br>Each record is repeated once.";
    return out;
  }
  
  // ZIP CODE MENU
  private String formatTkIdsHelp() {
    String out = "";
    out = "Changes the Zip code field to the format:<br>@XXX XX";
    return out;
  }
  
  private String CombineTkCitytHelp() {
    String out = "";
    out = "Combines the fields of the Zip Code and the city to the format:<br>@XXX XX  City";
    return out;
  }
  
  private String tkReportHelp() {
    String out = "";
    out = "Creates a report for the unsorted envelopes";
    return out;
  }
  
  private String findTkHelp() {
    String out = "";
    out = "";
    return out;
  }
  
  private String tkLabelsHelp() {
    String out = "";
    out = "";
    return out;
  }
  
  private String tkLabelsFromPcaddHelp() {
    String out = "";
    out = "";
    return out;
  }
  
  
  
  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JButton closeButton;
  private javax.swing.JScrollPane helpArea;
  private javax.swing.JEditorPane helpHTML;
  private javax.swing.JTree helpTree;
  private javax.swing.JLabel jLabel1;
  private javax.swing.JScrollPane jScrollPane1;
  private javax.swing.JSplitPane jSplitPane1;
  // End of variables declaration//GEN-END:variables
  
  
  
}
