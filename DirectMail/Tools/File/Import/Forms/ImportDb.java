/*
 * ImportDb.java
 *
 * Created on 20 Ιανουάριος 2008, 3:09 μμ
 */
package DirectMail.Tools.File.Import.Forms;

import DirectMail.Help.Components.MyDraggable;
import DirectMail.Options.DmOptions;
import DirectMail.Help.Components.Errors;
import DirectMail.Help.Functions.DmFunctions;
import DirectMail.Main.MainForm;
import soldatos.functions.SwingFunctions;
import soldatos.connection.MyDBCConnection;
import java.io.File;
import java.io.PrintWriter;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.Vector;
import java.util.logging.Level;
import javax.swing.ComboBoxModel;
import javax.swing.DefaultComboBoxModel;
import javax.swing.DefaultListModel;
import soldatos.functions.FileFunctions;

/**
 *
 * @author  ssoldatos
 */
public class ImportDb extends MyDraggable implements Runnable {

  ComboBoxModel modelDatabase = new DefaultComboBoxModel();
  ComboBoxModel modelTable = new DefaultComboBoxModel();
  DefaultListModel modelFields = new DefaultListModel();
  Vector<String> databaseVector = new Vector<String>();
  Vector<String> tablesVector = new Vector<String>();
  Vector<String> fieldsVector = new Vector<String>();
  private MyDBCConnection mdbc;
  private Statement stmt;
  private ResultSet rs;
  private long end,  start;
  private MainForm m;

  /** Creates new form ImportDb
   * @param m
   */
  public ImportDb(MainForm m) {
    this.m = m;
    initComponents();
  }

  @Override
  public void run() {
    MainForm.glassPane.activate(null);
    setLocationRelativeTo(null);
    setVisible(true);
  }

  /** This method is called from within the constructor to
   * initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is
   * always regenerated by the Form Editor.
   */
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {

    jPanel1 = new javax.swing.JPanel();
    jLabel1 = new javax.swing.JLabel();
    jLabel2 = new javax.swing.JLabel();
    jLabel3 = new javax.swing.JLabel();
    jLabel4 = new javax.swing.JLabel();
    tf_host = new javax.swing.JTextField();
    tf_un = new javax.swing.JTextField();
    tf_pass = new javax.swing.JTextField();
    jLabel5 = new javax.swing.JLabel();
    comboDatabase = new javax.swing.JComboBox();
    jLabel6 = new javax.swing.JLabel();
    comboTable = new javax.swing.JComboBox();
    jScrollPane1 = new javax.swing.JScrollPane();
    textAreaQuery = new javax.swing.JTextArea();
    jLabel7 = new javax.swing.JLabel();
    buttonOK = new javax.swing.JButton();
    buttonCancel = new javax.swing.JButton();
    buttonClearQuery = new javax.swing.JButton();
    buttonUpdate = new javax.swing.JButton();
    jLabel8 = new javax.swing.JLabel();
    jScrollPane2 = new javax.swing.JScrollPane();
    listFields = new javax.swing.JList();

    setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

    jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2));

    jLabel1.setFont(new java.awt.Font("Tahoma", 1, 14));
    jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
    jLabel1.setText("Import from a Database");

    jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
    jLabel2.setText("Host :");

    jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
    jLabel3.setText("Username :");

    jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
    jLabel4.setText("Password :");

    tf_host.setText("localhost");

    tf_un.setText("root");

    jLabel5.setText("Database :");

    comboDatabase.setModel(modelDatabase);
    comboDatabase.setFocusable(false);
    comboDatabase.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        comboDatabaseActionPerformed(evt);
      }
    });

    jLabel6.setText("Table :");

    comboTable.setModel(modelTable);
    comboTable.setFocusable(false);
    comboTable.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        comboTableActionPerformed(evt);
      }
    });

    jScrollPane1.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);

    textAreaQuery.setColumns(20);
    textAreaQuery.setFont(new java.awt.Font("Tahoma", 0, 14));
    textAreaQuery.setLineWrap(true);
    textAreaQuery.setRows(5);
    textAreaQuery.setWrapStyleWord(true);
    jScrollPane1.setViewportView(textAreaQuery);

    jLabel7.setText("Query to execute :");

    buttonOK.setText("OK");
    buttonOK.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        buttonOKActionPerformed(evt);
      }
    });

    buttonCancel.setText("Cancel");
    buttonCancel.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        buttonCancelActionPerformed(evt);
      }
    });

    buttonClearQuery.setText("Clear Query");
    buttonClearQuery.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        buttonClearQueryActionPerformed(evt);
      }
    });

    buttonUpdate.setIcon(new javax.swing.ImageIcon(getClass().getResource("/DirectMail/Images/update.gif"))); // NOI18N
    buttonUpdate.setBorder(null);
    buttonUpdate.setBorderPainted(false);
    buttonUpdate.setContentAreaFilled(false);
    buttonUpdate.setFocusable(false);
    buttonUpdate.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        buttonUpdateActionPerformed(evt);
      }
    });

    jLabel8.setText("Fields :");

    listFields.setModel(modelFields);
    listFields.addMouseListener(new java.awt.event.MouseAdapter() {
      public void mouseClicked(java.awt.event.MouseEvent evt) {
        listFieldsMouseClicked(evt);
      }
    });
    jScrollPane2.setViewportView(listFields);

    javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
    jPanel1.setLayout(jPanel1Layout);
    jPanel1Layout.setHorizontalGroup(
      jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(jPanel1Layout.createSequentialGroup()
        .addContainerGap()
        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
          .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 568, Short.MAX_VALUE)
          .addGroup(jPanel1Layout.createSequentialGroup()
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
              .addComponent(jLabel5)
              .addComponent(jLabel6)
              .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
              .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                  .addComponent(tf_un)
                  .addComponent(tf_pass)
                  .addComponent(tf_host, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(130, 130, 130)
                .addComponent(jLabel8)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
              .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                  .addComponent(comboTable, javax.swing.GroupLayout.Alignment.LEADING, 0, 202, Short.MAX_VALUE)
                  .addComponent(comboDatabase, 0, 202, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(buttonUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(41, 41, 41)))
            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 225, Short.MAX_VALUE))
          .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 568, Short.MAX_VALUE)
          .addGroup(jPanel1Layout.createSequentialGroup()
            .addComponent(buttonOK)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(buttonCancel)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 359, Short.MAX_VALUE)
            .addComponent(buttonClearQuery))
          .addComponent(jLabel7))
        .addContainerGap())
    );
    jPanel1Layout.setVerticalGroup(
      jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(jPanel1Layout.createSequentialGroup()
        .addContainerGap()
        .addComponent(jLabel1)
        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
          .addGroup(jPanel1Layout.createSequentialGroup()
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
              .addGroup(jPanel1Layout.createSequentialGroup()
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                  .addComponent(jLabel2)
                  .addComponent(tf_host, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                  .addComponent(jLabel3)
                  .addComponent(tf_un, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                  .addComponent(jLabel4)
                  .addComponent(tf_pass, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                  .addComponent(jLabel5)
                  .addComponent(comboDatabase, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                  .addComponent(jLabel6)
                  .addComponent(comboTable, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
              .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                  .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                  .addComponent(jLabel8))))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(jLabel7)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
          .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(buttonUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGap(57, 57, 57)))
        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(buttonOK)
          .addComponent(buttonCancel)
          .addComponent(buttonClearQuery))
        .addContainerGap(32, Short.MAX_VALUE))
    );

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
    getContentPane().setLayout(layout);
    layout.setHorizontalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
    );
    layout.setVerticalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
    );

    pack();
  }// </editor-fold>//GEN-END:initComponents
  private void buttonCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonCancelActionPerformed
    dispose();
    MainForm.glassPane.deactivate();
  }//GEN-LAST:event_buttonCancelActionPerformed

  private void buttonClearQueryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonClearQueryActionPerformed
    textAreaQuery.setText("");
  }//GEN-LAST:event_buttonClearQueryActionPerformed

  private void comboDatabaseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboDatabaseActionPerformed
    if (!String.valueOf(comboDatabase.getSelectedItem()).equals("")) {
      try {
        String sql = "show tables FROM " + String.valueOf(comboDatabase.getSelectedItem());
        stmt = MyDBCConnection.myConnection.createStatement();
        rs = stmt.executeQuery(sql);
        tablesVector.clear();
        modelTable = new DefaultComboBoxModel(tablesVector);
        comboTable.setModel(modelTable);
        while (rs.next()) {
          String table = rs.getString(1);
          tablesVector.add(table);
        }
        modelTable = new DefaultComboBoxModel(tablesVector);
        comboTable.setModel(modelTable);
      } catch (SQLException ex) {
        MainForm.myLog.log(Level.WARNING, null, ex);
      }
    }
  }//GEN-LAST:event_comboDatabaseActionPerformed

  private void comboTableActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboTableActionPerformed
    try {
      if (textAreaQuery.getText().equals("")) {
        textAreaQuery.setText("SELECT * FROM " +
            String.valueOf(comboDatabase.getSelectedItem()) +
            "." + String.valueOf(comboTable.getSelectedItem()));
      }
      String sql = "SHOW COLUMNS FROM " +
          String.valueOf(comboTable.getSelectedItem()) + " FROM " +
          String.valueOf(comboDatabase.getSelectedItem());

      stmt = MyDBCConnection.myConnection.createStatement();
      rs = stmt.executeQuery(sql);
      fieldsVector.clear();
      modelFields = new DefaultListModel();
      listFields.setModel(modelFields);
      while (rs.next()) {
        String field = rs.getString(1);
        modelFields.addElement(field);
      }
      listFields.setModel(modelFields);
    } catch (SQLException ex) {
      MainForm.myLog.log(Level.WARNING, null, ex);
    }
  }//GEN-LAST:event_comboTableActionPerformed

  private void buttonUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonUpdateActionPerformed
    String host = tf_host.getText().trim();
    String un = tf_un.getText().trim();
    String pass = tf_pass.getText().trim();

    if (!host.equals("") && (!un.equals(""))) {
      MyDBCConnection.connect(MainForm.options.toString(DmOptions.HOST),
          MainForm.options.toString(DmOptions.DATABASE),
          MainForm.options.toString(DmOptions.DB_USER),
          MainForm.options.toString(DmOptions.DB_PASSWORD));
      if (MyDBCConnection.isConnected) {
        try {
          String sql = "show databases";
          stmt = MyDBCConnection.myConnection.createStatement();
          rs = stmt.executeQuery(sql);
          databaseVector.clear();
          modelDatabase = new DefaultComboBoxModel(databaseVector);
          comboDatabase.setModel(modelDatabase);
          while (rs.next()) {
            String db = rs.getString(1);
            databaseVector.add(db);
          }
          modelDatabase = new DefaultComboBoxModel(databaseVector);
          comboDatabase.setModel(modelDatabase);
        } catch (SQLException ex) {
          MainForm.myLog.log(Level.WARNING, null, ex);
        }
      }
    }
}//GEN-LAST:event_buttonUpdateActionPerformed

  private void buttonOKActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonOKActionPerformed
    PrintWriter out;
    int lines = 0;
    String sampleLines = "";

    String sql = textAreaQuery.getText().trim();
    String database = String.valueOf(comboDatabase.getSelectedItem());
    String buffer = "";
    String outLine;
    String value;
    try {
      start = System.currentTimeMillis();
      stmt = MyDBCConnection.myConnection.createStatement();
      stmt.execute("use "+database);
      rs = stmt.executeQuery(sql);//GEN-LAST:event_buttonOKActionPerformed
      setVisible(false);
      int rows = DmFunctions.getResultSetNumberOfRows(rs);
      if (rows > 0) {
        String tmpFilename = FileFunctions.createRandomName();
        m.setOrigFileName(tmpFilename);
        File tmpOpenFile = new File(tmpFilename);
        m.setOrigFile(tmpOpenFile);
        tmpOpenFile.deleteOnExit();
        out = new PrintWriter(DmOptions._JAR_DIR_+"tmp/" + tmpFilename);

        m.setOutput("Importing From Database");
        m.setProgressText("Importing Database Records");
        m.IndeterminateProgress(true);

        while (rs.next()) {
          lines++;
          int cols = rs.getMetaData().getColumnCount();
          buffer = "";
          for (int i = 0; i < cols; i++) {
            if (rs.getString(i + 1) == null) {
              value = "";
            } else {
              value = rs.getString(i + 1);
            }
            if (i < cols - 1) {
              buffer += value + "\t";
            } else {
              buffer += value;
            }
          }
          if (lines < MainForm.options.toInt(DmOptions.MAX_SAMPLE_LINES)) {
            sampleLines += buffer + "\n";
          }
          out.println(buffer);
          m.setCustomers(lines);
        }
        out.close();
        dispose();
        m.setTextAreaText(sampleLines);
        m.init(false);
        m.setProgressText("");
        m.IndeterminateProgress(false);
        end = System.currentTimeMillis();
        m.appendOutput("\nExecution time : " + DmFunctions.execTime(start, end));
      } else {
        Errors.customError("No Rows", "No rows returned by the query");
      }
    } catch (Exception ex) {
      MainForm.myLog.log(Level.WARNING, null, ex);
    } finally {
      MainForm.glassPane.deactivate();
    }
  }

  private void listFieldsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_listFieldsMouseClicked
    Object[] selFields = listFields.getSelectedValues();
    String select = "";
    for (int i = 0; i <
        selFields.length; i++) {
      if (i < selFields.length - 1) {
        select += selFields[i] + ", ";
      } else {
        select += selFields[i];
      }

      textAreaQuery.setText("SELECT " + select + " FROM " +
          comboDatabase.getSelectedItem() + "." + comboTable.getSelectedItem());
    }
  }//GEN-LAST:event_listFieldsMouseClicked

  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JButton buttonCancel;
  private javax.swing.JButton buttonClearQuery;
  private javax.swing.JButton buttonOK;
  private javax.swing.JButton buttonUpdate;
  private javax.swing.JComboBox comboDatabase;
  private javax.swing.JComboBox comboTable;
  private javax.swing.JLabel jLabel1;
  private javax.swing.JLabel jLabel2;
  private javax.swing.JLabel jLabel3;
  private javax.swing.JLabel jLabel4;
  private javax.swing.JLabel jLabel5;
  private javax.swing.JLabel jLabel6;
  private javax.swing.JLabel jLabel7;
  private javax.swing.JLabel jLabel8;
  private javax.swing.JPanel jPanel1;
  private javax.swing.JScrollPane jScrollPane1;
  private javax.swing.JScrollPane jScrollPane2;
  private javax.swing.JList listFields;
  private javax.swing.JTextArea textAreaQuery;
  private javax.swing.JTextField tf_host;
  private javax.swing.JTextField tf_pass;
  private javax.swing.JTextField tf_un;
  // End of variables declaration//GEN-END:variables
}
